// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package account

import (
	"sync"
)

var (
	lockAccountRepoSpyFindAccount sync.RWMutex
	lockAccountRepoSpySaveAccount sync.RWMutex
)

// Ensure, that AccountRepoSpy does implement AccountRepo.
// If this is not the case, regenerate this file with moq.
var _ AccountRepo = &AccountRepoSpy{}

// AccountRepoSpy is a mock implementation of AccountRepo.
//
//     func TestSomethingThatUsesAccountRepo(t *testing.T) {
//
//         // make and configure a mocked AccountRepo
//         mockedAccountRepo := &AccountRepoSpy{
//             FindAccountFunc: func(in1 AccountID) (*Account, error) {
// 	               panic("mock out the FindAccount method")
//             },
//             SaveAccountFunc: func(in1 *Account) error {
// 	               panic("mock out the SaveAccount method")
//             },
//         }
//
//         // use mockedAccountRepo in code that requires AccountRepo
//         // and then make assertions.
//
//     }
type AccountRepoSpy struct {
	// FindAccountFunc mocks the FindAccount method.
	FindAccountFunc func(in1 AccountID) (*Account, error)

	// SaveAccountFunc mocks the SaveAccount method.
	SaveAccountFunc func(in1 *Account) error

	// calls tracks calls to the methods.
	calls struct {
		// FindAccount holds details about calls to the FindAccount method.
		FindAccount []struct {
			// In1 is the in1 argument value.
			In1 AccountID
		}
		// SaveAccount holds details about calls to the SaveAccount method.
		SaveAccount []struct {
			// In1 is the in1 argument value.
			In1 *Account
		}
	}
}

// FindAccount calls FindAccountFunc.
func (mock *AccountRepoSpy) FindAccount(in1 AccountID) (*Account, error) {
	if mock.FindAccountFunc == nil {
		panic("AccountRepoSpy.FindAccountFunc: method is nil but AccountRepo.FindAccount was just called")
	}
	callInfo := struct {
		In1 AccountID
	}{
		In1: in1,
	}
	lockAccountRepoSpyFindAccount.Lock()
	mock.calls.FindAccount = append(mock.calls.FindAccount, callInfo)
	lockAccountRepoSpyFindAccount.Unlock()
	return mock.FindAccountFunc(in1)
}

// FindAccountCalls gets all the calls that were made to FindAccount.
// Check the length with:
//     len(mockedAccountRepo.FindAccountCalls())
func (mock *AccountRepoSpy) FindAccountCalls() []struct {
	In1 AccountID
} {
	var calls []struct {
		In1 AccountID
	}
	lockAccountRepoSpyFindAccount.RLock()
	calls = mock.calls.FindAccount
	lockAccountRepoSpyFindAccount.RUnlock()
	return calls
}

// SaveAccount calls SaveAccountFunc.
func (mock *AccountRepoSpy) SaveAccount(in1 *Account) error {
	if mock.SaveAccountFunc == nil {
		panic("AccountRepoSpy.SaveAccountFunc: method is nil but AccountRepo.SaveAccount was just called")
	}
	callInfo := struct {
		In1 *Account
	}{
		In1: in1,
	}
	lockAccountRepoSpySaveAccount.Lock()
	mock.calls.SaveAccount = append(mock.calls.SaveAccount, callInfo)
	lockAccountRepoSpySaveAccount.Unlock()
	return mock.SaveAccountFunc(in1)
}

// SaveAccountCalls gets all the calls that were made to SaveAccount.
// Check the length with:
//     len(mockedAccountRepo.SaveAccountCalls())
func (mock *AccountRepoSpy) SaveAccountCalls() []struct {
	In1 *Account
} {
	var calls []struct {
		In1 *Account
	}
	lockAccountRepoSpySaveAccount.RLock()
	calls = mock.calls.SaveAccount
	lockAccountRepoSpySaveAccount.RUnlock()
	return calls
}
